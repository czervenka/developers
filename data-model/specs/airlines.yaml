openapi: 3.0.0
servers: []
info:
    version: 0.6.6
    title: 'Airline data definitions'
    description: 'Object definitions for the airline part of the WT platform.'
paths: {}
components:
    schemas: {AirlineOnChain: {title: 'WT-Index airline record', description: 'Airline record in WT-Index smart contract', type: object, required: [address, manager, dataUri, created], properties: {address: {description: 'Ethereum address of the airline', $ref: '#/components/schemas/EthereumAddressType'}, manager: {description: 'Ethereum address of the manager wallet', $ref: '#/components/schemas/EthereumAddressType'}, dataUri: {description: 'URI of the Airline data index (pointing off-chain)', $ref: '#/components/schemas/UriType'}, created: {description: 'Number of a block when the airline was created', type: integer}}}, AirlineDataIndex: {title: 'Airline data index', description: 'Landing index for airline resources. Link to this document is stored in WT-Index smart contract airline record.', type: object, required: [dataFormatVersion, descriptionUri], properties: {dataFormatVersion: {description: 'Version number indicating the data format specification version.', type: string, format: semver, maxLength: 20}, descriptionUri: {description: 'URI pointing to the AirlineDescription data resource', $ref: '#/components/schemas/UriType'}, flightsUri: {$ref: '#/components/schemas/UriType', description: 'URI pointing to Flights data resource'}, notificationsUri: {$ref: '#/components/schemas/UriType', description: 'URI pointing to an instance of the WT Notification service.'}, bookingUri: {$ref: '#/components/schemas/UriType', description: 'URI pointing to an instance of the WT Booking service.'}}}, AirlineDescription: {title: 'Airline description', allOf: [{$ref: '#/components/schemas/AirlineDescriptionBase'}, {type: object, required: [name, code, contacts, updatedAt, defaultCancellationAmount]}]}, AirlineDescriptionBase: {title: 'Airline description.', description: 'Basic properties of an airline.', type: object, properties: {name: {description: 'Name of the airline to display to users', $ref: '#/components/schemas/NameType'}, operator: {$ref: '#/components/schemas/LegalEntityType'}, code: {$ref: '#/components/schemas/AirlineCodeType'}, contacts: {type: object, description: 'A set of contacts.', required: [general], properties: {general: {description: 'Primary contact', $ref: '#/components/schemas/Contact'}}}, updatedAt: {type: string, description: 'Date-time when the data was last changed. Used by consumers to handle incremental updates and caching.', format: date-time}, defaultCancellationAmount: {type: number, format: float, description: 'Cost of cancellation in percents of the final price, 100 means non refundable. This is a default amount of how much money will the airline keep if no other cancallation policy is applicable.', example: 25}, cancellationPolicies: {description: 'A list of policies under which it is possible to cancel a reservation.', type: array, items: {$ref: '#/components/schemas/CancellationPolicy'}}}}, Flights: {type: object, description: 'A set of scheduled flights.', required: [updatedAt, items], properties: {items: {type: array, description: 'Array of Flights', items: {$ref: '#/components/schemas/Flight'}}, updatedAt: {description: 'Time of the last update of services information.', type: string, format: date-time}}}, Flight: {type: object, description: 'A single airline service.', required: [id, origin, destination, segments, flightInstances], properties: {id: {description: 'A flight ID.', type: string, maxLength: 255, example: OK0965}, origin: {description: 'IATA code of the origin airport.', $ref: '#/components/schemas/AirportCodeType'}, destination: {description: 'IATA code of the destination airport.', $ref: '#/components/schemas/AirportCodeType'}, equipmentType: {$ref: '#/components/schemas/EquipmentType'}, operatingAirline: {$ref: '#/components/schemas/AirlineCodeType'}, segments: {type: array, minItems: 1, items: {type: object, required: [id, departureAirport, arrivalAirport], properties: {id: {title: 'ID of the flight segment (must be unique for the given flight number).', type: string}, departureAirport: {description: 'IATA code of the departure airport.', $ref: '#/components/schemas/AirportCodeType'}, arrivalAirport: {description: 'IATA code of the arrival airport.', $ref: '#/components/schemas/AirportCodeType'}}}}, flightInstances: {$ref: '#/components/schemas/FlightInstances', description: 'URI pointing to the FlightInstances resource.'}}}, FlightInstances: {description: 'Array of flight instances for a specific flight number.', type: array, items: {$ref: '#/components/schemas/FlightInstance'}}, FlightInstance: {type: object, description: 'Data for a specific flight.', required: [id, departureDateTime, segments, bookingClasses, updatedAt], properties: {id: {description: 'A reference flight instance ID to be used during booking.', type: string, maxLength: 255, example: IeKeix6G}, departureDateTime: {description: 'Date and time of departure from the first segment', type: string, format: date-time}, bookingClasses: {description: "Array of price and availability information for\nvarious booking classes of the flight. In the\nfuture, this information might become more granular\n(per segment instead of per flight).\n", type: array, items: {type: object, required: [id, name, fare, availabilityCount], properties: {id: {description: "ID of the booking class to be referenced in\nbooking requests. Should be unique among all\nbooking classes of the flight.\n", type: string, maxLength: 255, example: economy}, name: {description: 'A human-readable name of the booking class.', type: string, maxLength: 255, example: Economy}, fare: {description: 'Fare price, potentially expressed in multiple currencies.', type: array, items: {$ref: '#/components/schemas/Fare'}}, availabilityCount: {type: integer, format: int32}}}}, segments: {description: "An object whose keys are segment IDs (they should match the segment IDs in the Flight data).\nIt specifies information for individual flight segments for the given flight instance.\n", type: object, additionalProperties: {type: object, required: [departureDateTime, arrivalDateTime], properties: {departureDateTime: {description: 'Time of the departure.', type: string, format: date-time}, arrivalDateTime: {description: 'Time of the arrival.', type: string, format: date-time}}}}, updatedAt: {description: 'Time of the last update of flight information.', type: string, format: date-time}}}, Fare: {type: object, required: [amount, currency], properties: {amount: {description: 'Fare price for the flight segment.', type: number, format: float}, currency: {description: 'Fare price currency.', $ref: '#/components/schemas/CurrencyType'}}}, AirlineCodeType: {title: 'Airline Code.', description: 'IATA 2-Letter Airline code.', type: string, minLength: 2, maxLength: 2}, AirportCodeType: {title: 'Airport Code.', description: 'IATA 3-Letter Airport code.', type: string, minLength: 3, maxLength: 3}, EquipmentType: {title: 'Airline equipment type (aircraft).', type: string, maxLength: 255}, Contact: {title: Contact, type: object, properties: {email: {description: 'E-mail contact', type: string, format: email, example: joseph.urban@example.com, maxLength: 150}, phone: {description: 'Phone number (with country prefix and a leading + sign)', type: string, maxLength: 18, example: '+44123456789', format: phone}, url: {description: 'Url to the contact web page', type: string, format: uri}, ethereum: {description: 'Address of wallet on Ethereum', $ref: '#/components/schemas/EthereumAddressType'}, additionalContacts: {description: 'More contact options, such as Whatsapp, WeChat, Telegram, twitter handle, facebook address. Once we see high demand for a particular type of contact, we can promote them to regular contact types.', type: array, items: {type: object, required: [title, value], properties: {title: {description: 'Name of this contact options', type: string, maxLength: 100}, value: {description: 'The actual contact', type: string, maxLength: 100}}}}}}, CancellationPolicy: {title: 'Cancellation policy', type: object, description: 'What is the penalty when a guest/passenger wants to cancel a reservation.', required: [amount], properties: {from: {description: 'After which date does this cancellation policy apply (including). If not present, this policy applies since the beginning of time. This is related to arrival and departure dates, not the date of the booking.', type: string, format: date, example: '2018-01-30'}, to: {description: 'Before which date does this cancellation policy apply(including). If not present, this policy applies until the end of the universe. This is related to arrival and departure dates, not the date of the booking.', type: string, format: date, example: '2018-02-20'}, deadline: {type: integer, description: 'How many days before hotel arrival or flight departure does this first apply. If not present, this policy applies any time.', example: 30}, amount: {type: number, format: float, description: 'Cost of cancellation in percents of the final price, 100 means non refundable. This means how much money will the hotel keep.', example: 25}}}, AddressType: {title: 'Postal address', description: 'Based on output of Open Street Map''s [Nominatim](https://wiki.openstreetmap.org/wiki/Nominatim). For formatting, take a look [here](https://github.com/OpenCageData/address-formatting).', type: object, required: [road, houseNumber, city, countryCode], properties: {houseNumber: {type: string, maxLength: 150}, road: {type: string, maxLength: 150}, city: {type: string, maxLength: 150}, county: {type: string, maxLength: 150}, stateDistrict: {type: string, maxLength: 150}, state: {type: string, maxLength: 150}, postcode: {type: string, maxLength: 13}, countryCode: {type: string, maxLength: 2, minLength: 2, description: 'ISO 3166-1 alpha-2 codes', format: country-code}}}, LegalEntityType: {title: 'Legal entity', type: object, description: 'A legal entity that can be held responsible', required: [name, address, contact], properties: {name: {description: 'Entity''s name as registered with the authorities', type: string, maxLength: 300}, address: {description: 'Entity''s postal address as registered with the authorities', $ref: '#/components/schemas/AddressType'}, contact: {description: 'Any way of contacting the entity', $ref: '#/components/schemas/Contact'}, vatin: {description: 'VAT identification number ([EU](https://en.wikipedia.org/wiki/VAT_identification_number), [US](https://www.irs.gov/individuals/international-taxpayers/taxpayer-identification-numbers-tin), or equivalents)', type: string, maxLength: 50}, lei: {description: 'Legal Entity Identifier as defined in ISO 17442, https://en.wikipedia.org/wiki/Legal_Entity_Identifier', type: string, length: 20}}}, CurrencyType: {title: 'Currency code', type: string, minLength: 3, maxLength: 3, description: 'Three letter ISO 4217 currency code.', format: currency-code}, DescriptionType: {title: 'Markdown description', description: 'Text description in simple Markdown format (bold, italic, titles, line break and paragraph format). Particular flavour of markdown is yet to be decided.', type: string, maxLength: 3000}, EthereumAddressType: {title: 'Ethereum address', type: string, description: 'Ethereum address in hexadecimal format (with leading 0x) or an ENS name.', maxLength: 300}, NameType: {title: 'Entity name', description: 'Human readable name identifying an entity (shown to users in search results, hotel/room details, etc)', type: string, maxLength: 150}, ObjectIdType: {title: ID, description: 'Vendor string ID', type: string, maxLength: 100, example: 1234-abcd}, TimezoneType: {title: 'Timezone code', description: 'Timezone name according to https://www.iana.org/time-zones (refer to zone.tab)', type: string, maxLength: 40, format: timezone}, UriType: {title: URI, description: 'URI for linking resources. The maximal length is 1500 to save space.', type: string, format: uri, maxLength: 1500}, LanguageCodeType: {title: 'Language code', description: 'Two letter language code based on ISO 639-1 standard', type: string, format: language-code, length: 2}}
